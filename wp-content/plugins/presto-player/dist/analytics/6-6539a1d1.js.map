{"version":3,"sources":["webpack:///./packages/components/dist/custom-elements/tutor.js"],"names":["tutor","player","sync_time","instance","options","_tutorobject4","post_id","getVideoData","data","action","currentTime","duration","_tutorobject","nonce_key","data_send","Object","assign","jQuery","post","ajaxurl","video_track_data","val","JSON","parse","tempTimeNow","on","event","detail","plyr","video_data","is_ended","autoload_next_course_content","_tutorobject2","_tutorobject3","done","response","_response$data","success","next_url","location","href","autoload_content"],"mappings":";;;;;;;;;;;;;;;;;mIAAA,OAiFeA,UAjFf,SAAgBC,GAEd,IAuBIC,EAAY,SAAmBC,EAAUC,GAC3C,IAAIC,EAEAC,EAAUC,IAAeD,QACzBE,EAAO,CACTC,OAAQ,sBACRC,YAAaP,EAASO,YACtBC,SAAUR,EAASQ,SACnBL,QAASA,GAEXE,EAAKI,aAAaC,WAAaD,aAAaA,aAAaC,WACzD,IAAIC,EAAYN,EAEZJ,IACFU,EAAYC,OAAOC,OAAOR,EAAMJ,IAGlCa,OAAOC,KAAwC,QAAlCb,EAAgBO,oBAA4C,IAAlBP,OAA2B,EAASA,EAAcc,QAASL,IAIhHP,EAAe,WACjB,IAAIa,EAAmBH,OAAO,qCAAqCI,MACnE,OAAOD,EAAmBE,KAAKC,MAAMH,GAAoB,IAIvDI,EAAc,EAGlBvB,EAAOwB,GAAG,cAAc,SAAUC,GAChC,IAAIvB,EAAWuB,EAAMC,OAAOC,KACLJ,EAAc,GAJjB,KAOlBtB,EAAUC,GACVqB,EAAc,GAGhBA,OAGFvB,EAAOwB,GAAG,SAAS,SAAUC,GAC3B,IAAIG,EAAatB,IACbJ,EAAWuB,EAAMC,OAAOC,KAI5B1B,EAAUC,EAHC,CACT2B,UAAU,IAIRD,EAAWE,8BAzEM,WACrB,IAAIC,EAAeC,EAEnB,GAAKrB,aAAaC,WAAkD,QAAlCmB,EAAgBpB,oBAA4C,IAAlBoB,GAA4BA,EAAcb,QAAtH,CAIA,IACIX,EAAO,CACTC,OAAQ,+BACRH,QAHYC,IAAeD,SAK7BE,EAAKI,aAAaC,WAAaD,aAAaA,aAAaC,WACzDI,OAAOC,KAAwC,QAAlCe,EAAgBrB,oBAA4C,IAAlBqB,OAA2B,EAASA,EAAcd,QAASX,GAAM0B,MAAK,SAAUC,GACrI,IAAIC,EAEAD,SAA4CA,EAASE,SAArDF,MAAgEA,GAAiF,QAApCC,EAAiBD,EAAS3B,YAAqC,IAAnB4B,GAA6BA,EAAeE,WACvMC,SAASC,KAAOL,EAAS3B,KAAK8B,cAyDhCG","file":"analytics/6-6539a1d1.js","sourcesContent":["function tutor (player) {\n  // autoload course content\n  var autoload_content = function autoload_content() {\n    var _tutorobject2, _tutorobject3;\n\n    if (!_tutorobject.nonce_key || !((_tutorobject2 = _tutorobject) !== null && _tutorobject2 !== void 0 && _tutorobject2.ajaxurl)) {\n      return;\n    }\n\n    var post_id = getVideoData().post_id;\n    var data = {\n      action: 'autoload_next_course_content',\n      post_id: post_id\n    };\n    data[_tutorobject.nonce_key] = _tutorobject[_tutorobject.nonce_key];\n    jQuery.post((_tutorobject3 = _tutorobject) === null || _tutorobject3 === void 0 ? void 0 : _tutorobject3.ajaxurl, data).done(function (response) {\n      var _response$data;\n\n      if (response !== null && response !== void 0 && response.success && response !== null && response !== void 0 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.next_url) {\n        location.href = response.data.next_url;\n      }\n    });\n  }; // sync time with server\n\n\n  var sync_time = function sync_time(instance, options) {\n    var _tutorobject4;\n\n    var post_id = getVideoData().post_id;\n    var data = {\n      action: 'sync_video_playback',\n      currentTime: instance.currentTime,\n      duration: instance.duration,\n      post_id: post_id\n    };\n    data[_tutorobject.nonce_key] = _tutorobject[_tutorobject.nonce_key];\n    var data_send = data;\n\n    if (options) {\n      data_send = Object.assign(data, options);\n    }\n\n    jQuery.post((_tutorobject4 = _tutorobject) === null || _tutorobject4 === void 0 ? void 0 : _tutorobject4.ajaxurl, data_send);\n  }; // get video data\n\n\n  var getVideoData = function getVideoData() {\n    var video_track_data = jQuery('#tutor_video_tracking_information').val();\n    return video_track_data ? JSON.parse(video_track_data) : {};\n  }; // update time on server every 250ms\n\n\n  var tempTimeNow = 0;\n  var intervalSeconds = 30; //Send to tutor backend about video playing time in this interval\n\n  player.on('timeupdate', function (event) {\n    var instance = event.detail.plyr;\n    var tempTimeNowInSec = tempTimeNow / 4; //timeupdate firing 250ms interval\n\n    if (tempTimeNowInSec >= intervalSeconds) {\n      sync_time(instance);\n      tempTimeNow = 0;\n    }\n\n    tempTimeNow++;\n  }); // on end, sync time and autoload content\n\n  player.on('ended', function (event) {\n    var video_data = getVideoData();\n    var instance = event.detail.plyr;\n    var data = {\n      is_ended: true\n    };\n    sync_time(instance, data);\n\n    if (video_data.autoload_next_course_content) {\n      autoload_content();\n    }\n  });\n}\n\nexport default tutor;\n"],"sourceRoot":""}