{"version":3,"sources":["webpack:///./web-components/dist/custom-elements/hls.js"],"names":["hls","_ref","config","selector","src","preload","Promise","resolve","reject","window","Hls","isSupported","_wp","autoStartLoad","includes","wp","blocks","loadSource","on","Events","LEVEL_SWITCHED","event","data","span","closest","querySelector","autoLevelEnabled","innerHTML","concat","levels","level","height","MANIFEST_PARSED","availableQualities","map","l","unshift","startLevel","findIndex","qty","_prestoPlayer","parseInt","prestoPlayer","hls_start_level","quality","default","options","forced","onChange","newQuality","prestoHLS","currentLevel","forEach","levelIndex","console","log","attachMedia","player","PrestoPlayer","_objectSpread2","firstPlay","startLoad","off","setTimeout","subtitleTrack","currentTrack"],"mappings":";;;;;;;;;;;;;;;;;6HAAA,mBAsGeA,UApGF,SAAUC,GACrB,IAAIC,EAASD,EAAKC,OACdC,EAAWF,EAAKE,SAChBC,EAAMH,EAAKG,IACXC,EAAUJ,EAAKI,QACnB,OAAO,IAAIC,SAAQ,SAAUC,EAASC,GACpC,GAAKC,OAAOC,IAAZ,CAIA,GAAID,OAAOC,IAAIC,cAAe,CAC5B,IAAIC,EAGAC,GAAiB,CAAC,WAAY,QAAQC,SAAST,GAEhC,QAAdO,EAAMG,UAAwB,IAARH,GAAkBA,EAAII,SAC/CH,GAAgB,GAIlB,IAAIb,EAAM,IAAIS,OAAOC,IAAI,CACvBG,cAAeA,IAuEjB,OArEAb,EAAIiB,WAAWb,GAEfJ,EAAIkB,GAAGT,OAAOC,IAAIS,OAAOC,gBAAgB,SAAUC,EAAOC,GACxD,IAAIC,EAAOpB,EAASqB,QAAQ,2BAA2BC,cAAc,gEAEjEzB,EAAI0B,iBACNH,EAAKI,UAAY,SAASC,OAAO5B,EAAI6B,OAAOP,EAAKQ,OAAOC,OAAQ,MAEhER,EAAKI,UAAY,eAMrB3B,EAAIkB,GAAGT,OAAOC,IAAIS,OAAOa,iBAAiB,SAAUX,EAAOC,GAEzD,IAAIW,EAAqBjC,EAAI6B,OAAOK,KAAI,SAAUC,GAChD,OAAOA,EAAEJ,UAEXE,EAAmBG,QAAQ,GAG3B,IAAIC,EAAaJ,EAAmBK,WAAU,SAAUC,GACtD,IAAIC,EAEJ,OAAOD,IAAQE,SAA4C,QAAlCD,EAAgBE,oBAA4C,IAAlBF,OAA2B,EAASA,EAAcG,oBAEvH3C,EAAIqC,WAAaA,EAAaA,EAAa,EAAI,EAE/CnC,EAAO0C,QAAU,CACfC,QAAS,EACTC,QAASb,EAETc,QAAQ,EACRC,SAAU,SAAkBC,GACP,IAAfA,EACFC,UAAUC,cAAgB,EAE1BD,UAAUrB,OAAOuB,SAAQ,SAAUtB,EAAOuB,GACpCvB,EAAMC,SAAWkB,IACnBK,QAAQC,IAAI,4BAA8BN,GAC1CC,UAAUC,aAAeE,QAOnCrD,EAAIwD,YAAYrD,GAChBM,OAAOyC,UAAYlD,EAEnB,IAAIyD,EAAS,IAAIC,IAAavD,EAAUwD,YAAe,GAAIzD,IAC3DuD,EAAOzD,IAAMA,EAeb,OARAyD,EAAOvC,GAAG,WALM,SAAS0C,IACvB5D,EAAI6D,WAAW,GACfJ,EAAOK,IAAI,UAAWF,MAKxBH,EAAOvC,GAAG,kBAAkB,WAE1B6C,YAAW,WACT,OAAO/D,EAAIgE,cAAgBP,EAAOQ,eACjC,OAEE1D,EAAQkD,MAKnB,OAAOlD,EAAQ,IAAImD,IAAavD,EAAUwD,YAAe,GAAIzD","file":"blocks/6-ab53567d.js","sourcesContent":["import { P as PrestoPlayer, _ as _objectSpread2 } from './index.js';\n\nconst hls = (function (_ref) {\n  var config = _ref.config,\n      selector = _ref.selector,\n      src = _ref.src,\n      preload = _ref.preload;\n  return new Promise(function (resolve, reject) {\n    if (!window.Hls) {\n      return;\n    }\n\n    if (window.Hls.isSupported()) {\n      var _wp;\n\n      // should we autoload start\n      var autoStartLoad = !['metadata', 'none'].includes(preload); // always autoload in admin for preview\n\n      if ((_wp = wp) !== null && _wp !== void 0 && _wp.blocks) {\n        autoStartLoad = true;\n      } // maybe don't auto start load depending on performance parameter\n\n\n      var hls = new window.Hls({\n        autoStartLoad: autoStartLoad\n      });\n      hls.loadSource(src); // update menu container to dynamically display quality\n\n      hls.on(window.Hls.Events.LEVEL_SWITCHED, function (event, data) {\n        var span = selector.closest('.presto-player__wrapper').querySelector(\".plyr__menu__container [data-plyr='quality'][value='0'] span\");\n\n        if (hls.autoLevelEnabled) {\n          span.innerHTML = \"AUTO (\".concat(hls.levels[data.level].height, \"p)\");\n        } else {\n          span.innerHTML = \"AUTO\";\n        }\n      }); // From the m3u8 playlist, hls parses the manifest and returns\n      // all available video qualities. This is important, in this approach,\n      // we will have one source on the Plyr player.\n\n      hls.on(window.Hls.Events.MANIFEST_PARSED, function (event, data) {\n        // Transform available levels into an array of integers (height values).\n        var availableQualities = hls.levels.map(function (l) {\n          return l.height;\n        });\n        availableQualities.unshift(0); //prepend 0 to quality array;\n        // do start level\n\n        var startLevel = availableQualities.findIndex(function (qty) {\n          var _prestoPlayer;\n\n          return qty === parseInt((_prestoPlayer = prestoPlayer) === null || _prestoPlayer === void 0 ? void 0 : _prestoPlayer.hls_start_level);\n        });\n        hls.startLevel = startLevel ? startLevel - 1 : 2; // Add new qualities to option\n\n        config.quality = {\n          default: 0,\n          options: availableQualities,\n          // this ensures Plyr to use Hls to update quality level\n          forced: true,\n          onChange: function onChange(newQuality) {\n            if (newQuality === 0) {\n              prestoHLS.currentLevel = -1; //Enable AUTO quality if option.value = 0\n            } else {\n              prestoHLS.levels.forEach(function (level, levelIndex) {\n                if (level.height === newQuality) {\n                  console.log('Found quality match with ' + newQuality);\n                  prestoHLS.currentLevel = levelIndex;\n                }\n              });\n            }\n          }\n        }; // attach media and make our HLS options available globally\n\n        hls.attachMedia(selector);\n        window.prestoHLS = hls; // Initialize player\n\n        var player = new PrestoPlayer(selector, _objectSpread2({}, config));\n        player.hls = hls; // make sure we start loading on the first play\n\n        var firstPlay = function firstPlay() {\n          hls.startLoad(-1);\n          player.off('waiting', firstPlay);\n        };\n\n        player.on('waiting', firstPlay); // Handle changing captions\n\n        player.on('languagechange', function () {\n          // Caption support is still flaky. See: https://github.com/sampotts/plyr/issues/994\n          setTimeout(function () {\n            return hls.subtitleTrack = player.currentTrack;\n          }, 50);\n        });\n        return resolve(player);\n      });\n      return;\n    }\n\n    return resolve(new PrestoPlayer(selector, _objectSpread2({}, config)));\n  });\n});\n\nexport default hls;\n"],"sourceRoot":""}